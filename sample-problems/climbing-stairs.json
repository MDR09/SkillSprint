{
  "title": "Climbing Stairs",
  "difficulty": "Easy",
  "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
  "problemStatement": "You are climbing a staircase. It takes n steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\nThis is a classic dynamic programming problem similar to the Fibonacci sequence.",
  "functionName": "climbStairs",
  "parameters": [
    {
      "name": "n",
      "type": "number",
      "pythonType": "int",
      "javaType": "int",
      "cppType": "int",
      "description": "The number of steps in the staircase (1 to 45)"
    }
  ],
  "returnType": "number",
  "pythonReturnType": "int",
  "javaReturnType": "int",
  "cppReturnType": "int",
  "examples": [
    {
      "input": "n = 2",
      "output": "2",
      "explanation": "There are two ways to climb to the top: 1. 1 step + 1 step, 2. 2 steps"
    },
    {
      "input": "n = 3",
      "output": "3",
      "explanation": "There are three ways to climb to the top: 1. 1 step + 1 step + 1 step, 2. 1 step + 2 steps, 3. 2 steps + 1 step"
    }
  ],
  "constraints": [
    "1 <= n <= 45"
  ],
  "hints": [
    "To reach step n, you could have come from step n-1 (by taking 1 step) or step n-2 (by taking 2 steps).",
    "This gives us the recurrence relation: f(n) = f(n-1) + f(n-2)",
    "Think about how you can solve this efficiently without recursion."
  ],
  "testCases": [
    {
      "input": {
        "n": 2
      },
      "expectedOutput": 2,
      "isHidden": false
    },
    {
      "input": {
        "n": 3
      },
      "expectedOutput": 3,
      "isHidden": false
    },
    {
      "input": {
        "n": 1
      },
      "expectedOutput": 1,
      "isHidden": true
    },
    {
      "input": {
        "n": 4
      },
      "expectedOutput": 5,
      "isHidden": true
    },
    {
      "input": {
        "n": 5
      },
      "expectedOutput": 8,
      "isHidden": true
    },
    {
      "input": {
        "n": 10
      },
      "expectedOutput": 89,
      "isHidden": true
    },
    {
      "input": {
        "n": 20
      },
      "expectedOutput": 10946,
      "isHidden": true
    },
    {
      "input": {
        "n": 35
      },
      "expectedOutput": 14930352,
      "isHidden": true
    }
  ],
  "category": "Dynamic Programming",
  "tags": ["Dynamic Programming", "Math", "Memoization"],
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)",
  "allowedLanguages": ["javascript", "python", "java", "cpp"],
  "timeLimit": 30,
  "memoryLimit": "256MB",
  "scoring": {
    "maxPoints": 100,
    "partialCredit": true
  }
}
