{
  "title": "Maximum Subarray",
  "difficulty": "Medium",
  "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
  "problemStatement": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\nA subarray is a contiguous part of an array.\n\nThis is a classic dynamic programming problem that can be solved using Kadane's algorithm.",
  "functionName": "maxSubArray",
  "parameters": [
    {
      "name": "nums",
      "type": "number[]",
      "pythonType": "List[int]",
      "javaType": "int[]",
      "cppType": "vector<int>",
      "description": "Integer array to find maximum subarray sum from"
    }
  ],
  "returnType": "number",
  "pythonReturnType": "int",
  "javaReturnType": "int",
  "cppReturnType": "int",
  "examples": [
    {
      "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
      "output": "6",
      "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
    },
    {
      "input": "nums = [1]",
      "output": "1",
      "explanation": "The subarray [1] has the largest sum 1."
    },
    {
      "input": "nums = [5,4,-1,7,8]",
      "output": "23",
      "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
    }
  ],
  "constraints": [
    "1 <= nums.length <= 10^5",
    "-10^4 <= nums[i] <= 10^4"
  ],
  "hints": [
    "Try using dynamic programming. Keep track of the maximum sum ending at each position.",
    "At each position, you can either start a new subarray or extend the previous one.",
    "The answer is max(currentSum, maxSum) where currentSum is the maximum sum ending at current position."
  ],
  "testCases": [
    {
      "input": {
        "nums": [-2, 1, -3, 4, -1, 2, 1, -5, 4]
      },
      "expectedOutput": 6,
      "isHidden": false,
      "description": "Standard test case with mixed positive and negative numbers"
    },
    {
      "input": {
        "nums": [1]
      },
      "expectedOutput": 1,
      "isHidden": false,
      "description": "Single element array"
    },
    {
      "input": {
        "nums": [5, 4, -1, 7, 8]
      },
      "expectedOutput": 23,
      "isHidden": false,
      "description": "Mostly positive numbers"
    },
    {
      "input": {
        "nums": [-1]
      },
      "expectedOutput": -1,
      "isHidden": true,
      "description": "Single negative element"
    },
    {
      "input": {
        "nums": [-2, -1, -3, -4, -1, -2, -1, -5, -4]
      },
      "expectedOutput": -1,
      "isHidden": true,
      "description": "All negative numbers"
    },
    {
      "input": {
        "nums": [1, 2, 3, 4, 5]
      },
      "expectedOutput": 15,
      "isHidden": true,
      "description": "All positive numbers"
    },
    {
      "input": {
        "nums": [-2, 1, -3, 4, -1, 2, 1, -5, 4, 6, 7, 8]
      },
      "expectedOutput": 20,
      "isHidden": true,
      "description": "Longer array with optimal subarray at the end"
    },
    {
      "input": {
        "nums": [8, -19, 5, -4, 20]
      },
      "expectedOutput": 21,
      "isHidden": true,
      "description": "Mix with large negative number in middle"
    }
  ],
  "category": "Dynamic Programming",
  "tags": ["Array", "Dynamic Programming", "Divide and Conquer"],
  "timeComplexity": "O(n)",
  "spaceComplexity": "O(1)",
  "allowedLanguages": ["javascript", "python", "java", "cpp"],
  "timeLimit": 45,
  "memoryLimit": "256MB",
  "scoring": {
    "maxPoints": 120,
    "partialCredit": true
  }
}
